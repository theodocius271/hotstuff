// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: hotstuff.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HotStuffService_SendMsg_FullMethodName     = "/proto.HotStuffService/SendMsg"
	HotStuffService_SendRequest_FullMethodName = "/proto.HotStuffService/SendRequest"
	HotStuffService_SendReply_FullMethodName   = "/proto.HotStuffService/SendReply"
)

// HotStuffServiceClient is the client API for HotStuffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HotStuffServiceClient interface {
	SendMsg(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Empty, error)
	SendRequest(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Empty, error)
	SendReply(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Empty, error)
}

type hotStuffServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHotStuffServiceClient(cc grpc.ClientConnInterface) HotStuffServiceClient {
	return &hotStuffServiceClient{cc}
}

func (c *hotStuffServiceClient) SendMsg(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, HotStuffService_SendMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotStuffServiceClient) SendRequest(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, HotStuffService_SendRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotStuffServiceClient) SendReply(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, HotStuffService_SendReply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotStuffServiceServer is the server API for HotStuffService service.
// All implementations must embed UnimplementedHotStuffServiceServer
// for forward compatibility.
type HotStuffServiceServer interface {
	SendMsg(context.Context, *Msg) (*Empty, error)
	SendRequest(context.Context, *Msg) (*Empty, error)
	SendReply(context.Context, *Msg) (*Empty, error)
	mustEmbedUnimplementedHotStuffServiceServer()
}

// UnimplementedHotStuffServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHotStuffServiceServer struct{}

func (UnimplementedHotStuffServiceServer) SendMsg(context.Context, *Msg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedHotStuffServiceServer) SendRequest(context.Context, *Msg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequest not implemented")
}
func (UnimplementedHotStuffServiceServer) SendReply(context.Context, *Msg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReply not implemented")
}
func (UnimplementedHotStuffServiceServer) mustEmbedUnimplementedHotStuffServiceServer() {}
func (UnimplementedHotStuffServiceServer) testEmbeddedByValue()                         {}

// UnsafeHotStuffServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotStuffServiceServer will
// result in compilation errors.
type UnsafeHotStuffServiceServer interface {
	mustEmbedUnimplementedHotStuffServiceServer()
}

func RegisterHotStuffServiceServer(s grpc.ServiceRegistrar, srv HotStuffServiceServer) {
	// If the following call pancis, it indicates UnimplementedHotStuffServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HotStuffService_ServiceDesc, srv)
}

func _HotStuffService_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotStuffServiceServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotStuffService_SendMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotStuffServiceServer).SendMsg(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotStuffService_SendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotStuffServiceServer).SendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotStuffService_SendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotStuffServiceServer).SendRequest(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotStuffService_SendReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotStuffServiceServer).SendReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotStuffService_SendReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotStuffServiceServer).SendReply(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

// HotStuffService_ServiceDesc is the grpc.ServiceDesc for HotStuffService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HotStuffService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HotStuffService",
	HandlerType: (*HotStuffServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMsg",
			Handler:    _HotStuffService_SendMsg_Handler,
		},
		{
			MethodName: "SendRequest",
			Handler:    _HotStuffService_SendRequest_Handler,
		},
		{
			MethodName: "SendReply",
			Handler:    _HotStuffService_SendReply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hotstuff.proto",
}
